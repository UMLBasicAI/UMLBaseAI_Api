version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  dotnet-executor:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0
    working_directory: ~/project

jobs:
  build:
    executor: dotnet-executor
    steps:
      - checkout

      - run:
          name: Restore dependencies
          command: dotnet restore Src/Entry/Entry.csproj

      - run:
          name: Build entry project
          command: dotnet build Src/Entry/Entry.csproj --configuration Release --no-restore

      - run:
          name: Run tests
          command: echo "No tests defined - skip or add here"

      - run:
          name: SonarCloud scan
          command: |
            dotnet tool install --global dotnet-sonarscanner
            export PATH="$PATH:/root/.dotnet/tools"

            dotnet sonarscanner begin \
              /k:"UMLBasicAI_UMLBaseAI_Api" \
              /o:"umlbasicai" \
              /d:sonar.token="$SONAR_TOKEN" \
              /d:sonar.exclusions="**/Migrations/**/*,**/obj/**/*,**/*.http,**/launchSettings.json" \
              /d:sonar.coverage.exclusions="**/*" \
              /d:sonar.verbose=true \
              /d:sonar.cpd.exclusions="**/*"

            dotnet build UMLBasicAI.sln --no-restore --configuration Release

            dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

      - run:
          name: Publish app
          command: dotnet publish Src/Entry/Entry.csproj -c Release -o ./publish --self-contained false

      - persist_to_workspace:
          root: .
          paths:
            - publish

  deploy-template:
    parameters:
      env:
        type: string
      path:
        type: string
      service_name:
        type: string

    executor: dotnet-executor
    steps:
      - attach_workspace:
          at: ~/project

      - add_ssh_keys:
          fingerprints:
            - "SHA256:l773R58oKSwz7pggORkLHL2XxUko5EMWHOMuu2AvS/8"

      - run:
          name: Install SCP
          command: |
            apt-get update && apt-get install -y openssh-client

      - run:
          name: Check and install .NET on VPS
          command: |
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 << 'EOF'
              if ! command -v dotnet &> /dev/null; then
                echo ".NET not found. Installing .NET SDK and Runtime..."
                wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                sudo dpkg -i packages-microsoft-prod.deb
                rm packages-microsoft-prod.deb
                sudo apt-get update
                sudo apt-get install -y dotnet-sdk-8.0 aspnetcore-runtime-8.0
              else
                echo ".NET is already installed:"
                dotnet --info
              fi
            EOF

      - run:
          name: Create app directory on VPS
          command: |
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 << EOF
              mkdir -p << parameters.path >>
            EOF

      - run:
          name: Copy publish files to VPS
          command: |
            scp -o StrictHostKeyChecking=no -r ./publish/* adminplantuml@20.189.124.231:<< parameters.path >>

      - run:
          name: Reload systemd daemon
          command: |
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 "sudo systemctl daemon-reload"

      - run:
          name: Restart << parameters.service_name >> service
          command: |
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 "sudo systemctl restart << parameters.service_name >>"

      - run:
          name: Check << parameters.service_name >> status
          command: |
            ssh -o StrictHostKeyChecking=no adminplantuml@20.189.124.231 "sudo systemctl status << parameters.service_name >> --no-pager"

workflows:
  build-deploy:
    jobs:
      - build:
          context: SonarCloud

      - deploy-template:
          name: deploy-production
          requires:
            - build
          env: production
          path: /home/adminplantuml/apps/umlbasicaiapi/production
          service_name: umlbasicaiapi
          filters:
            branches:
              only: main

      - deploy-template:
          name: deploy-development
          requires:
            - build
          env: development
          path: /home/adminplantuml/apps/umlbasicaiapi/development
          service_name: umlbasicaiapi-development
          filters:
            branches:
              only: dev

      - deploy-template:
          name: deploy-tst
          requires:
            - build
          env: tst
          path: /home/adminplantuml/apps/umlbasicaiapi/tst
          service_name: umlbasicaiapi-tst
          filters:
            branches:
              only: tst
